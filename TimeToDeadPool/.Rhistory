scale_x_continuous(breaks = xFlowScaleCurr, labels = xFlowScaleCurr) +
#limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#scale_y_continuous(breaks = seq(0,50,by=10), labels = seq(0,50,by=10), limits = c(0, 50)) +
#Color scale for polygons - increasing red as go to lower levels
scale_fill_manual(breaks = c(2,1),values = c(palReds[3],palReds[2]),labels = dfPolyLabel$Label ) +
#scale_fill_manual(guide="Guide2", breaks = c("Top","Middle","Bottom"),values = c("Blue","Green","Red"),labels = c("Fill (years)","Steady volume (maf)","To 1,025 (years)" )) +
scale_color_manual(breaks = c("Top","Middle","Bottom"), values=c("red","purple","blue"), labels=c("To Fill (years)","Steady volume (maf)","To 1,025 (years)")) +
theme_bw() +
scale_size(guide="none") +
labs(x=paste(dfInflowAxes[i,1]," (MAF per year)"), y="Mead Active Storage (MAF)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20),
legend.position = "none")
print(pPlot)
sFigNum <- paste("Fig",i+6,"-InflowDurationStorage",sep="")
sFigName <- paste(sFigNum,dfInflowAxes[i,3],sep="")
ggsave(paste(sFigName,".jpg"),width = 12,
height = 7.5, units = "in",
dpi = 300)
# End Loop over axes
}
dfInflowStorageSimulations <- data.frame(InitStorage=0, Inflow=0, FinalStorage=0, Status="dummy", Year=0, index=0, Release=0)
maxIts <- 100
#Initial Storage scenarios (MAF)
cInitStorageScens <- seq(3,tMaxVol,by=2)*1e6
#Steady Inflow scenarios (MAF per year)
cInflowScens <- seq(4,12, by=0.5)*1e6
nFlowScens <- length(cInflowScens)
#Define DCP zone polygons
dfPolyScens <- dfPolyAll
dfPolyScens$Inflow <- c(cInflowScens[1],cInflowScens[nFlowScens],cInflowScens[nFlowScens],cInflowScens[1],cInflowScens[1],cInflowScens[nFlowScens],cInflowScens[nFlowScens],cInflowScens[1])
dfPolyScens$MidInflow <- mean(cInflowScens[1],cInflowScens[nFlowScens])
#Loop over initial storage
for (tInitStorage in cInitStorage) {
#Loop over stead natural inflow values (stress tests)
for (tInflow in cInflowScens){
#tInflow <- 6e6
#debug(TimeToReservoirTarget)
tRes <- TimeToReservoirTarget(Sinit = tInitStorage, inflow = tInflow, deliveryVolume = dfCutbacks$DeliveryDCP, # deliveryVolume = dfCutbacks$DeliveryDCP,
deliveryResStorage = dfCutbacks$MeadActiveVolume, eRate = eRateToUse,  ResArea = dfMeadElevStor$`Area (acres)`,
ResVolume = dfMeadElevStor$`Live Storage (ac-ft)`, MaxIts = maxIts, sMethodRelease = "constant",
#Down to 1025 ft
#sMinTarget = dfMeadValsAdd$value[6], sMaxTarget = tMaxVol*1e6, startYear = startYear )
#Down to Dead Pool
sMinTarget = dfMeadAllPools$value[9], sMaxTarget = tMaxVol*1e6, startYear = startYear )
#Append results to dataframe
dfTempRecord <- data.frame(InitStorage=tInitStorage, Inflow=tInflow, FinalStorage=tRes$volume, Status=tRes$status, Year=startYear+tRes$periods, index=tRes$periods, Release=tRes$dfTimeResults$Release)
dfInflowStorageSimulations <- rbind(dfInflowStorageSimulations, dfTempRecord)
}
}
#Remove the first dummy row of zeros
dfInflowStorageSimulations <- dfInflowStorageSimulations[2:nrow(dfInflowStorageSimulations),]
# Plot up storage over time for different inflow traces.
dfTimeInflowStorageResults <- dfInflowStorageSimulations
# Select even rows for plotting flow labels
dfTimeInflowStorageResultsEven <- dfTimeInflowStorageResults[seq(2,nrow(dfTimeResults),by=2),]
xLabelPos <- 0.7*max(dfTimeInflowStorageResults$Inflow/1e6) # in inflow units
#Flow scale
xFlowScale <- seq(min(dfTimeInflowStorageResults$Inflow),max(dfTimeInflowStorageResults$Inflow),1e6)/1e6
#Calculate label as either years to bottom target, years to full, or steady-state storage in maf
dfTimeInflowStorageResults$Label <- ifelse(dfTimeInflowStorageResults$Status == "Middle",
paste(round(dfTimeInflowStorageResults$FinalStorage/1e6, digits=1),'maf'),
paste(dfTimeInflowStorageResults$index,"yr"))
#Calculate contour value as either years to bottom target, years to full, or steady-state storage in maf
dfTimeInflowStorageResults$ContourValue <- ifelse(dfTimeInflowStorageResults$Status == "Middle",
round(dfTimeInflowStorageResults$FinalStorage/1e6, digits=1),
dfTimeInflowStorageResults$index)
#Remove duplicate rows and rows with NA
dfTimeInflowStorageResultsClean <- dfTimeInflowStorageResults[complete.cases(dfTimeInflowStorageResults),] %>% distinct(InitStorage, Inflow, .keep_all=TRUE)
p <- ggplot() +
#Polygon zones
geom_polygon(data = dfPolyScens, aes(x = Inflow, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyScens$DumVal)), show.legend = F) +
#  geom_polygon(data = dfPolyAll, aes(x = Year, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyAll$DumVal)), show.legend = F) +
#Inflow traces
#geom_line(data=dfTimeInflowStorageResults,aes(x=Year,y=Storage/1e6, group = Inflow/1e6, color = (Inflow/1e6)), size=2) +
#  geom_text(aes(x=xLabelPos, y=23, label="Time to Mead 1025\n(Years)"), angle = 0, size = 7, hjust="middle") +
#Plot labels that show the the numbre of years to
#geom_label(data=dfTimeInflowStorageResults , aes( x = Inflow/1e6, y = InitStorage/1e6, label = round(FinalStorage/1e6,1), color = Status , size = index ,fontface="bold"),  angle = 0) +
#geom_label(data=dfTimeInflowStorageResults , aes( x = Inflow/1e6, y = InitStorage/1e6, label = Label, color = Status , size = 5 ,fontface="bold"),  angle = 0) +
geom_label(data=dfTimeInflowStorageResultsClean , aes( x = Inflow/1e6, y = InitStorage/1e6, label = Label, color = Status , size = 5 ,fontface="bold"),  angle = 0) +
#Label the polygons
geom_label(data=dfPolyLabel[1,], aes(x = MidInflow, y = MidMead/1e6, label = Label, fontface="bold"), size=6, angle = 0) +
#Label the polygons
#  geom_label(data=dfPolyLabel, aes(x = xLabelPos, y = MidMead/1e6, label = Label, fontface="bold"), size=6, angle = 0) +
#Y-axis: Active storage on left, Elevation with labels on right
scale_y_continuous(breaks = seq(0,tMaxVol,by=5), labels = seq(0,tMaxVol,by=5), limits = c(0, tMaxVol),
sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$labelSecY)) +
scale_x_continuous(breaks = xFlowScale, labels = xFlowScale) +
#limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#scale_y_continuous(breaks = seq(0,50,by=10), labels = seq(0,50,by=10), limits = c(0, 50)) +
#Color scale for polygons - increasing red as go to lower levels
scale_fill_manual(breaks = c(2,1),values = c(palReds[5],palReds[4]),labels = dfPolyLabel$Label ) +
#scale_fill_manual(guide="Guide2", breaks = c("Top","Middle","Bottom"),values = c("Blue","Green","Red"),labels = c("Fill (years)","Steady volume (maf)","To 1,025 (years)" )) +
scale_color_manual(breaks = c("Top","Middle","Bottom"), values=c("red","green","blue"), labels=c("To Fill (years)","Steady volume (maf)","To 1,025 (years)")) +
theme_bw() +
scale_size(guide="none") +
labs(x="Steady Inflow (MAF/year)", y="Mead Active Storage (MAF)", color =  "End State") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20), legend.text=element_text(size=18),
panel.border = element_rect(colour = "black", fill=NA),
legend.box.background = element_rect(colour = "black"),
legend.box.margin = margin(6, 6, 6, 6),
legend.position = c(1.125,0.85)) #,
#legend.position = "none")
print(p)
View(dfPolyScens)
dfInflowStorageSimulations <- data.frame(InitStorage=0, Inflow=0, FinalStorage=0, Status="dummy", Year=0, index=0, Release=0)
maxIts <- 100
#Initial Storage scenarios (MAF)
cInitStorageScens <- seq(3,tMaxVol,by=2)*1e6
#Steady Inflow scenarios (MAF per year)
cInflowScens <- seq(4,12, by=0.5)*1e6
nFlowScens <- length(cInflowScens)
#Define DCP zone polygons
dfPolyScens <- dfPolyAll
dfPolyScens$Inflow <- c(cInflowScens[1],cInflowScens[nFlowScens],cInflowScens[nFlowScens],cInflowScens[1],cInflowScens[1],cInflowScens[nFlowScens],cInflowScens[nFlowScens],cInflowScens[1])
dfPolyScens$MidInflow <- mean(cInflowScens[1],cInflowScens[nFlowScens])
#Loop over initial storage
for (tInitStorage in cInitStorageScens) {
#Loop over stead natural inflow values (stress tests)
for (tInflow in cInflowScens){
#tInflow <- 6e6
#debug(TimeToReservoirTarget)
tRes <- TimeToReservoirTarget(Sinit = tInitStorage, inflow = tInflow, deliveryVolume = dfCutbacks$DeliveryDCP, # deliveryVolume = dfCutbacks$DeliveryDCP,
deliveryResStorage = dfCutbacks$MeadActiveVolume, eRate = eRateToUse,  ResArea = dfMeadElevStor$`Area (acres)`,
ResVolume = dfMeadElevStor$`Live Storage (ac-ft)`, MaxIts = maxIts, sMethodRelease = "constant",
#Down to 1025 ft
#sMinTarget = dfMeadValsAdd$value[6], sMaxTarget = tMaxVol*1e6, startYear = startYear )
#Down to Dead Pool
sMinTarget = dfMeadAllPools$value[9], sMaxTarget = tMaxVol*1e6, startYear = startYear )
#Append results to dataframe
dfTempRecord <- data.frame(InitStorage=tInitStorage, Inflow=tInflow, FinalStorage=tRes$volume, Status=tRes$status, Year=startYear+tRes$periods, index=tRes$periods, Release=tRes$dfTimeResults$Release)
dfInflowStorageSimulations <- rbind(dfInflowStorageSimulations, dfTempRecord)
}
}
#Remove the first dummy row of zeros
dfInflowStorageSimulations <- dfInflowStorageSimulations[2:nrow(dfInflowStorageSimulations),]
# Plot up storage over time for different inflow traces.
dfTimeInflowStorageResults <- dfInflowStorageSimulations
# Select even rows for plotting flow labels
dfTimeInflowStorageResultsEven <- dfTimeInflowStorageResults[seq(2,nrow(dfTimeResults),by=2),]
xLabelPos <- 0.7*max(dfTimeInflowStorageResults$Inflow/1e6) # in inflow units
#Flow scale
xFlowScale <- seq(min(dfTimeInflowStorageResults$Inflow),max(dfTimeInflowStorageResults$Inflow),1e6)/1e6
#Calculate label as either years to bottom target, years to full, or steady-state storage in maf
dfTimeInflowStorageResults$Label <- ifelse(dfTimeInflowStorageResults$Status == "Middle",
paste(round(dfTimeInflowStorageResults$FinalStorage/1e6, digits=1),'maf'),
paste(dfTimeInflowStorageResults$index,"yr"))
#Calculate contour value as either years to bottom target, years to full, or steady-state storage in maf
dfTimeInflowStorageResults$ContourValue <- ifelse(dfTimeInflowStorageResults$Status == "Middle",
round(dfTimeInflowStorageResults$FinalStorage/1e6, digits=1),
dfTimeInflowStorageResults$index)
#Remove duplicate rows and rows with NA
dfTimeInflowStorageResultsClean <- dfTimeInflowStorageResults[complete.cases(dfTimeInflowStorageResults),] %>% distinct(InitStorage, Inflow, .keep_all=TRUE)
p <- ggplot() +
#Polygon zones
geom_polygon(data = dfPolyScens, aes(x = Inflow, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyScens$DumVal)), show.legend = F) +
#  geom_polygon(data = dfPolyAll, aes(x = Year, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyAll$DumVal)), show.legend = F) +
#Inflow traces
#geom_line(data=dfTimeInflowStorageResults,aes(x=Year,y=Storage/1e6, group = Inflow/1e6, color = (Inflow/1e6)), size=2) +
#  geom_text(aes(x=xLabelPos, y=23, label="Time to Mead 1025\n(Years)"), angle = 0, size = 7, hjust="middle") +
#Plot labels that show the the numbre of years to
#geom_label(data=dfTimeInflowStorageResults , aes( x = Inflow/1e6, y = InitStorage/1e6, label = round(FinalStorage/1e6,1), color = Status , size = index ,fontface="bold"),  angle = 0) +
#geom_label(data=dfTimeInflowStorageResults , aes( x = Inflow/1e6, y = InitStorage/1e6, label = Label, color = Status , size = 5 ,fontface="bold"),  angle = 0) +
geom_label(data=dfTimeInflowStorageResultsClean , aes( x = Inflow/1e6, y = InitStorage/1e6, label = Label, color = Status , size = 5 ,fontface="bold"),  angle = 0) +
#Label the polygons
geom_label(data=dfPolyLabel[1,], aes(x = MidInflow, y = MidMead/1e6, label = Label, fontface="bold"), size=6, angle = 0) +
#Label the polygons
#  geom_label(data=dfPolyLabel, aes(x = xLabelPos, y = MidMead/1e6, label = Label, fontface="bold"), size=6, angle = 0) +
#Y-axis: Active storage on left, Elevation with labels on right
scale_y_continuous(breaks = seq(0,tMaxVol,by=5), labels = seq(0,tMaxVol,by=5), limits = c(0, tMaxVol),
sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$labelSecY)) +
scale_x_continuous(breaks = xFlowScale, labels = xFlowScale) +
#limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#scale_y_continuous(breaks = seq(0,50,by=10), labels = seq(0,50,by=10), limits = c(0, 50)) +
#Color scale for polygons - increasing red as go to lower levels
scale_fill_manual(breaks = c(2,1),values = c(palReds[5],palReds[4]),labels = dfPolyLabel$Label ) +
#scale_fill_manual(guide="Guide2", breaks = c("Top","Middle","Bottom"),values = c("Blue","Green","Red"),labels = c("Fill (years)","Steady volume (maf)","To 1,025 (years)" )) +
scale_color_manual(breaks = c("Top","Middle","Bottom"), values=c("red","green","blue"), labels=c("To Fill (years)","Steady volume (maf)","To 1,025 (years)")) +
theme_bw() +
scale_size(guide="none") +
labs(x="Steady Inflow (MAF/year)", y="Mead Active Storage (MAF)", color =  "End State") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20), legend.text=element_text(size=18),
panel.border = element_rect(colour = "black", fill=NA),
legend.box.background = element_rect(colour = "black"),
legend.box.margin = margin(6, 6, 6, 6),
legend.position = c(1.125,0.85)) #,
#legend.position = "none")
print(p)
dfPolyScens$Inflow <- c(cInflowScens[1],cInflowScens[nFlowScens],cInflowScens[nFlowScens],cInflowScens[1],cInflowScens[1],cInflowScens[nFlowScens],cInflowScens[nFlowScens],cInflowScens[1])/1e6
dfPolyScens$MidInflow <- mean(cInflowScens[1],cInflowScens[nFlowScens])/1e6
p <- ggplot() +
#Polygon zones
geom_polygon(data = dfPolyScens, aes(x = Inflow, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyScens$DumVal)), show.legend = F) +
#  geom_polygon(data = dfPolyAll, aes(x = Year, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyAll$DumVal)), show.legend = F) +
#Inflow traces
#geom_line(data=dfTimeInflowStorageResults,aes(x=Year,y=Storage/1e6, group = Inflow/1e6, color = (Inflow/1e6)), size=2) +
#  geom_text(aes(x=xLabelPos, y=23, label="Time to Mead 1025\n(Years)"), angle = 0, size = 7, hjust="middle") +
#Plot labels that show the the numbre of years to
#geom_label(data=dfTimeInflowStorageResults , aes( x = Inflow/1e6, y = InitStorage/1e6, label = round(FinalStorage/1e6,1), color = Status , size = index ,fontface="bold"),  angle = 0) +
#geom_label(data=dfTimeInflowStorageResults , aes( x = Inflow/1e6, y = InitStorage/1e6, label = Label, color = Status , size = 5 ,fontface="bold"),  angle = 0) +
geom_label(data=dfTimeInflowStorageResultsClean , aes( x = Inflow/1e6, y = InitStorage/1e6, label = Label, color = Status , size = 5 ,fontface="bold"),  angle = 0) +
#Label the polygons
geom_label(data=dfPolyLabel[1,], aes(x = MidInflow, y = MidMead/1e6, label = Label, fontface="bold"), size=6, angle = 0) +
#Label the polygons
#  geom_label(data=dfPolyLabel, aes(x = xLabelPos, y = MidMead/1e6, label = Label, fontface="bold"), size=6, angle = 0) +
#Y-axis: Active storage on left, Elevation with labels on right
scale_y_continuous(breaks = seq(0,tMaxVol,by=5), labels = seq(0,tMaxVol,by=5), limits = c(0, tMaxVol),
sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$labelSecY)) +
scale_x_continuous(breaks = xFlowScale, labels = xFlowScale) +
#limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#scale_y_continuous(breaks = seq(0,50,by=10), labels = seq(0,50,by=10), limits = c(0, 50)) +
#Color scale for polygons - increasing red as go to lower levels
scale_fill_manual(breaks = c(2,1),values = c(palReds[5],palReds[4]),labels = dfPolyLabel$Label ) +
#scale_fill_manual(guide="Guide2", breaks = c("Top","Middle","Bottom"),values = c("Blue","Green","Red"),labels = c("Fill (years)","Steady volume (maf)","To 1,025 (years)" )) +
scale_color_manual(breaks = c("Top","Middle","Bottom"), values=c("red","green","blue"), labels=c("To Fill (years)","Steady volume (maf)","To 1,025 (years)")) +
theme_bw() +
scale_size(guide="none") +
labs(x="Steady Inflow (MAF/year)", y="Mead Active Storage (MAF)", color =  "End State") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20), legend.text=element_text(size=18),
panel.border = element_rect(colour = "black", fill=NA),
legend.box.background = element_rect(colour = "black"),
legend.box.margin = margin(6, 6, 6, 6),
legend.position = c(1.125,0.85)) #,
#legend.position = "none")
print(p)
dfInflowAxes <- data.frame(Title = c("Steady Mead Inflow", "Powell Release", "Lee Ferry Natural Flow"),
TranformFromSteady = as.numeric(c(0,-GrandCanyonTribFlows ,vMeadInflowToLeeNaturalCorrection)),
FileName = c("MeadInflow","PowellRelease","LeeFerry"))
# plot following https://www.r-statistics.com/2016/07/using-2d-contour-plots-within-ggplot2-to-visualize-relationships-between-three-variables/
# Specify the contour intervals (years to reach target)
# See https://cran.r-project.org/web/packages/metR/vignettes/Visualization-tools.html
#Calculate inflow positions for labels of plot areas: bottom, mid, top. These are the min and max
#inflows for each group
#Remove plyr to group
detach(package:plyr)
if (!require(metR)) {
install.packages("metR")
library(metR)
}
nRows <- nrow(dfInflowAxes)
for (i in (1:nRows)) {
print(i)
}
pPlot <- seq(1,nRows,by=1)
# Loop over the inflow axes
for (i in (1:nRows)) {
#i <- 3
#Print out the iteration
print(i)
#Calculate the inflow values to use
dfTimeInflowStorageResultsClean$InflowToUse <- dfTimeInflowStorageResultsClean$Inflow +
dfInflowAxes[i,2]
#Calculate a convienent flow scale to use
min(dfTimeInflowStorageResultsClean$InflowToUse/1e6,1e6)
xFlowScaleCurr <- seq(floor(min(dfTimeInflowStorageResultsClean$InflowToUse/1e6)),ceiling(max(dfTimeInflowStorageResultsClean$InflowToUse/1e6)))
#Calculate positions for the group labels
dfStatusPositions <- dfTimeInflowStorageResultsClean %>% group_by(Status) %>% summarize(MinInflow = min(InflowToUse), MaxInflow = max(InflowToUse))
#Add textlabels
dfStatusPositions$Label <- c("Time to Dead Pool\n(Years)","Steady Storage\n(MAF)", "Time to Fill\n(Years)")
dfStatusPositions$MidInflow <- (dfStatusPositions$MinInflow + dfStatusPositions$MaxInflow)/2
#Use geom_contour as contour plot
pPlot <- ggplot() +
geom_polygon(data = dfPolyScens, aes(x = Inflow + dfInflowAxes[i,2]/1e6, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyScens$DumVal)), show.legend = F) +
geom_contour(data=dfTimeInflowStorageResultsClean, aes(x=InflowToUse/1e6,y= InitStorage/1e6, z = ContourValue, color = Status), binwidth=4, size=1.5)   +
geom_text_contour(data=dfTimeInflowStorageResultsClean, aes(x=InflowToUse/1e6,y= InitStorage/1e6, z = ContourValue), binwidth=4, size=6, check_overlap = TRUE, min.size = 5) +
geom_label(data=dfStatusPositions, aes(x = MidInflow/1e6 , y = tMaxVol+2, label = Label, fontface="bold", color=Status), size=6, angle = 0) +
#Label the polygons
#  geom_label(data=dfPolyLabel, aes(x = xLabelPos, y = MidMead/1e6, label = Label, fontface="bold"), size=6, angle = 0) +
#Y-axis: Active storage on left, Elevation with labels on right
scale_y_continuous(breaks = seq(0,tMaxVol,by=5), labels = seq(0,tMaxVol,by=5), limits = c(0, tMaxVol+3),
sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$labelSecY)) +
scale_x_continuous(breaks = xFlowScaleCurr, labels = xFlowScaleCurr) +
#limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#scale_y_continuous(breaks = seq(0,50,by=10), labels = seq(0,50,by=10), limits = c(0, 50)) +
#Color scale for polygons - increasing red as go to lower levels
scale_fill_manual(breaks = c(2,1),values = c(palReds[3],palReds[2]),labels = dfPolyLabel$Label ) +
#scale_fill_manual(guide="Guide2", breaks = c("Top","Middle","Bottom"),values = c("Blue","Green","Red"),labels = c("Fill (years)","Steady volume (maf)","To 1,025 (years)" )) +
scale_color_manual(breaks = c("Top","Middle","Bottom"), values=c("red","purple","blue"), labels=c("To Fill (years)","Steady volume (maf)","To 1,025 (years)")) +
theme_bw() +
scale_size(guide="none") +
labs(x=paste(dfInflowAxes[i,1]," (MAF per year)"), y="Mead Active Storage (MAF)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20),
legend.position = "none")
print(pPlot)
sFigNum <- paste("Fig",i+6,"-InflowDurationStorage",sep="")
sFigName <- paste(sFigNum,dfInflowAxes[i,3],sep="")
ggsave(paste(sFigName,".jpg"),width = 12,
height = 7.5, units = "in",
dpi = 300)
# End Loop over axes
}
sPaleoFile <- 'DroughtDurations.xlsx'
dfPaleoEvents <- read_excel(sPaleoFile, sheet = "Sheet1",  range = "A4:E18")
#Order the data frame by Flow
dfPaleoEvents <- dfPaleoEvents[order(dfPaleoEvents$`Average Flow (maf)`),]
dfPaleoEvents$YearRange <- paste(dfPaleoEvents$`Start Year`," to ",dfPaleoEvents$`End Year`)
dfDurations <- dfTimeInflowStorageResultsClean %>% filter(Status == "Bottom")
cFlows <- unique(dfDurations$InflowToUse)
cDurs <- unique(dfDurations$index)
mgridStors <- meshgrid(cFlows, cDurs)
for (iFlow in cFlows) {
for (iDur in cDurs) {
dfTempRecord <- dfDurations %>% filter(InflowToUse == iFlow, index == iDur)
mgridStors[iFlow,iDur] <- ifelse(nrow(dfTempRecord)==0,0,dfTempRecord$InitStorage)
}
}
mgridStors[1][1]
mgridStors[2][2]
mgridStors[2][1]
mgridStors[2]
mgridStors[1](1)
mgridStors[1][1,1]
x <- linspace(-1, 1, 11)
y <- linspace(-1, 1, 11)
mgrid <- meshgrid(x, y)
Z <- mgrid$X^2 + mgrid$Y^2
xp <- yp <- linspace(-1, 1, 101)
method <- "linear"
zp <- interp2(x, y, Z, xp, yp, method)
plot(xp, zp, type = "l", col = "blue")
method = "nearest"
zp <- interp2(x, y, Z, xp, yp, method)
mgrid
Z
mgridStors <- meshgrid(cFlows, cDurs)
mgridStors
cFlows <- unique(sort(dfDurations$InflowToUse))
cDurs <- unique(sort(dfDurations$index))
mgridStors <- meshgrid(cFlows, cDurs)
mgridStors
Z
nInitStorScens <- length(cInitStorageScens)
mStors <- matrix(0, nrow = nFlowScens, ncol = nInitStorScens)
#Assign the right values to mgridStors
for (iFlow in cFlows) {
for (iDur in cDurs) {
dfTempRecord <- dfDurations %>% filter(InflowToUse == iFlow, index == iDur)
mStors[iFlow,iDur] <- ifelse(nrow(dfTempRecord)==0,0,dfTempRecord$InitStorage)
}
}
cFlows
for (i in (1:nFlowScens)) {
iFlow <- cFlows[i]
for (j in (1:nInitStorScens)) {
iDur <- cDurs[j]
dfTempRecord <- dfDurations %>% filter(InflowToUse == iFlow, index == iDur)
mStors[i,j] <- ifelse(nrow(dfTempRecord)==0,0,dfTempRecord$InitStorage)
}
}
mStors
zp <- interp2(x=cFlows, y=cDurs, Z = mStors, xp=9, yp=5, "linear")
cDurs
nDurs <- length(cDurs)
nDurs <- length(cDurs)
#Create a matrix of the storages for a particular Flow and Duration
mStors <- matrix(0, nrow = nFlowScens, ncol = nDurs)
#Assign the right values to mgridStors
for (i in (1:nFlowScens)) {
iFlow <- cFlows[i]
for (j in (1:nDurs)) {
iDur <- cDurs[j]
dfTempRecord <- dfDurations %>% filter(InflowToUse == iFlow, index == iDur)
mStors[i,j] <- ifelse(nrow(dfTempRecord)==0,0,dfTempRecord$InitStorage)
}
}
mStors
zp <- interp2(x=cFlows, y=cDurs, Z = mStors, xp=9, yp=5, "linear")
size(mStors)
zp <- interp2(x=cDurs, y=cFlows, Z = mStors, xp=9, yp=5, "linear")
ncol(mStors)
nrow(mStors)
zp <- interp2(x=cDurs, y=cInflowScens, Z = mStors, xp=9, yp=5, "linear")
dfPaleoEvents$InitStor <- interp2(x=cDurs, y=cInflowScens, Z = mStors, xp=dfPaleoEvents$index, yp=dfPaleoEvents$`Average Flow (maf)`, "linear")
dfPaleoEvents$InitStor <- interp2(x=cDurs, y=cInflowScens, Z = mStors, xp=dfPaleoEvents$`Length (years)`, yp=dfPaleoEvents$`Average Flow (maf)`, "linear")
mStors
cLeeFlows <- unique(sort(dfDurations$InflowToUse))
nLeeFlows <- length(cLeeFlows)
cDurs <- unique(sort(dfDurations$index))
nDurs <- length(cDurs)
nLeeFlows <- length(cLeeFlows)
#Create a matrix of the storages for a particular Flow and Duration
mStors <- matrix(0, nrow = nLeeFlows, ncol = nDurs)
#Assign the right values to mgridStors
for (i in (1:nLeeFlows)) {
iFlow <- cFlows[i]
for (j in (1:nDurs)) {
iDur <- cDurs[j]
dfTempRecord <- dfDurations %>% filter(InflowToUse == iFlow, index == iDur)
mStors[i,j] <- ifelse(nrow(dfTempRecord)==0,0,dfTempRecord$InitStorage)
}
}
#Loop through the Paleo events and interpolate a storage for the specified flow and duration
dfPaleoEvents$InitStor <- interp2(x=cDurs, y=cLeeFlows, Z = mStors, xp=dfPaleoEvents$`Length (years)`, yp=dfPaleoEvents$`Average Flow (maf)`, "linear")
mStors
interp2(x=cDurs, y=cLeeFlows, Z = mStors, xp=cDurs[1], yp=cLeeFlows[1], "linear")
dfPaleoEvents$InitStor <- interp2(x=cDurs, y=cLeeFlows, Z = mStors, xp=dfPaleoEvents$`Length (years)`, yp=dfPaleoEvents$`Average Flow (maf)`*1e6, "linear")
for (i in (1:nLeeFlows)) {
iFlow <- cFlows[i]
for (j in (1:nDurs)) {
iDur <- cDurs[j]
dfTempRecord <- dfDurations %>% filter(InflowToUse == iFlow, index == iDur)
mStors[i,j] <- ifelse(nrow(dfTempRecord)==0,tMaxVol,dfTempRecord$InitStorage)
}
}
#Loop through the Paleo events and interpolate a storage for the specified flow and duration
dfPaleoEvents$InitStor <- interp2(x=cDurs, y=cLeeFlows, Z = mStors, xp=dfPaleoEvents$`Length (years)`, yp=dfPaleoEvents$`Average Flow (maf)`*1e6, "linear")
dfPaleoEvents$InitStor <- interp2(x=cDurs, y=cLeeFlows, Z = mStors/1e6, xp=dfPaleoEvents$`Length (years)`, yp=dfPaleoEvents$`Average Flow (maf)`*1e6, "linear")
for (i in (1:nLeeFlows)) {
iFlow <- cFlows[i]
for (j in (1:nDurs)) {
iDur <- cDurs[j]
dfTempRecord <- dfDurations %>% filter(InflowToUse == iFlow, index == iDur)
mStors[i,j] <- ifelse(nrow(dfTempRecord)==0,tMaxVol*1e6,dfTempRecord$InitStorage)
}
}
#Loop through the Paleo events and interpolate a storage for the specified flow and duration
dfPaleoEvents$InitStor <- interp2(x=cDurs, y=cLeeFlows, Z = mStors/1e6, xp=dfPaleoEvents$`Length (years)`, yp=dfPaleoEvents$`Average Flow (maf)`*1e6, "linear")
pPlot <- pPlot +
geom_point(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor))
print(pPlot)
pPlot <- pPlot +
geom_point(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor), size=5)
print(pPlot)
pPlot <- pPlot +
geom_point(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor), size=5) +
geom_label(data=dfPaleoEvents, label=dfPaleoEvents$YearRange)
pPlot <- pPlot +
geom_point(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor), size=5) +
geom_label(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor, label=dfPaleoEvents$YearRange), size = 3)
pPlot2 <-ggplot() +
geom_point(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor), size=5) +
geom_label(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor, label=dfPaleoEvents$YearRange), size = 3)
print(pPlot2)
pPlot2 <-ggplot() +
geom_point(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor), size=5) +
geom_label(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor, label=dfPaleoEvents$YearRange), size = 5)
print(pPlot2)
ggplot() +
geom_point(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor), size=5)
ggplot() +
geom_point(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor), size=5) +
geom_text_repel(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor, label=dfPaleoEvents$YearRange), size = 5)
ggplot() +
geom_point(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor), size=5) +
geom_text(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor, label=dfPaleoEvents$YearRange), size = 5)
library(ggrepel)
ggplot() +
geom_point(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor), size=5) +
geom_text_repel(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor, label=dfPaleoEvents$YearRange), size = 5)
pPlot <- seq(1,nRows,by=1)
# Loop over the inflow axes
for (i in (1:nRows)) {
#i <- 3
#Print out the iteration
print(i)
#Calculate the inflow values to use
dfTimeInflowStorageResultsClean$InflowToUse <- dfTimeInflowStorageResultsClean$Inflow +
dfInflowAxes[i,2]
#Calculate a convienent flow scale to use
min(dfTimeInflowStorageResultsClean$InflowToUse/1e6,1e6)
xFlowScaleCurr <- seq(floor(min(dfTimeInflowStorageResultsClean$InflowToUse/1e6)),ceiling(max(dfTimeInflowStorageResultsClean$InflowToUse/1e6)))
#Calculate positions for the group labels
dfStatusPositions <- dfTimeInflowStorageResultsClean %>% group_by(Status) %>% summarize(MinInflow = min(InflowToUse), MaxInflow = max(InflowToUse))
#Add textlabels
dfStatusPositions$Label <- c("Time to Dead Pool\n(Years)","Steady Storage\n(MAF)", "Time to Fill\n(Years)")
dfStatusPositions$MidInflow <- (dfStatusPositions$MinInflow + dfStatusPositions$MaxInflow)/2
#Use geom_contour as contour plot
pPlot <- ggplot() +
geom_polygon(data = dfPolyScens, aes(x = Inflow + dfInflowAxes[i,2]/1e6, y = MeadVol/1e6, group = id, fill = as.factor(dfPolyScens$DumVal)), show.legend = F) +
geom_contour(data=dfTimeInflowStorageResultsClean, aes(x=InflowToUse/1e6,y= InitStorage/1e6, z = ContourValue, color = Status), binwidth=4, size=1.5)   +
geom_text_contour(data=dfTimeInflowStorageResultsClean, aes(x=InflowToUse/1e6,y= InitStorage/1e6, z = ContourValue), binwidth=4, size=6, check_overlap = TRUE, min.size = 5) +
geom_label(data=dfStatusPositions, aes(x = MidInflow/1e6 , y = tMaxVol+2, label = Label, fontface="bold", color=Status), size=6, angle = 0) +
#Label the polygons
#  geom_label(data=dfPolyLabel, aes(x = xLabelPos, y = MidMead/1e6, label = Label, fontface="bold"), size=6, angle = 0) +
#Y-axis: Active storage on left, Elevation with labels on right
scale_y_continuous(breaks = seq(0,tMaxVol,by=5), labels = seq(0,tMaxVol,by=5), limits = c(0, tMaxVol+3),
sec.axis = sec_axis(~. +0, name = "Mead Level (feet)", breaks = dfMeadPoolsPlot$stor_maf, labels = dfMeadPoolsPlot$labelSecY)) +
scale_x_continuous(breaks = xFlowScaleCurr, labels = xFlowScaleCurr) +
#limits = c(0,as.numeric(dfMaxStor %>% filter(Reservoir %in% c("Mead")) %>% select(Volume))),
#scale_y_continuous(breaks = seq(0,50,by=10), labels = seq(0,50,by=10), limits = c(0, 50)) +
#Color scale for polygons - increasing red as go to lower levels
scale_fill_manual(breaks = c(2,1),values = c(palReds[3],palReds[2]),labels = dfPolyLabel$Label ) +
#scale_fill_manual(guide="Guide2", breaks = c("Top","Middle","Bottom"),values = c("Blue","Green","Red"),labels = c("Fill (years)","Steady volume (maf)","To 1,025 (years)" )) +
scale_color_manual(breaks = c("Top","Middle","Bottom"), values=c("red","purple","blue"), labels=c("To Fill (years)","Steady volume (maf)","To 1,025 (years)")) +
theme_bw() +
scale_size(guide="none") +
labs(x=paste(dfInflowAxes[i,1]," (MAF per year)"), y="Mead Active Storage (MAF)") +
#theme(text = element_text(size=20), legend.title=element_blank(), legend.text=element_text(size=18),
#      legend.position = c(0.8,0.7))
theme(text = element_text(size=20),
legend.position = "none")
print(pPlot)
sFigNum <- paste("Fig",i+6,"-InflowDurationStorage",sep="")
sFigName <- paste(sFigNum,dfInflowAxes[i,3],sep="")
ggsave(paste(sFigName,".jpg"),width = 12,
height = 7.5, units = "in",
dpi = 300)
# End Loop over axes
}
pPlot <- pPlot +
geom_point(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor), size=5) +
geom_text_repel(data=dfPaleoEvents, aes(x=`Average Flow (maf)`, y=InitStor, label=dfPaleoEvents$YearRange), size = 5)
print(pPlot)
